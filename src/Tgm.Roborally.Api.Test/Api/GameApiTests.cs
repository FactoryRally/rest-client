/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v0.8.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Api;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Test
{
    /// <summary>
    ///  Class for testing GameApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GameApiTests : IDisposable
    {
        private GameApi instance;

        public GameApiTests()
        {
            instance = new GameApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of GameApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GameApi
            //Assert.IsType(typeof(GameApi), instance, "instance is a GameApi");
        }

        
        /// <summary>
        /// Test CommitAction
        /// </summary>
        [Fact]
        public void CommitActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int gameId = null;
            //ActionType action = null;
            //instance.CommitAction(gameId, action);
            
        }
        
        /// <summary>
        /// Test CreateGame
        /// </summary>
        [Fact]
        public void CreateGameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GameRules gameRules = null;
            //var response = instance.CreateGame(gameRules);
            //Assert.IsType<int> (response, "response is int");
        }
        
        /// <summary>
        /// Test GetActions
        /// </summary>
        [Fact]
        public void GetActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int gameId = null;
            //string mode = null;
            //var response = instance.GetActions(gameId, mode);
            //Assert.IsType<List<Action>> (response, "response is List<Action>");
        }
        
        /// <summary>
        /// Test GetGameState
        /// </summary>
        [Fact]
        public void GetGameStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int gameId = null;
            //var response = instance.GetGameState(gameId);
            //Assert.IsType<GameInfo> (response, "response is GameInfo");
        }
        
        /// <summary>
        /// Test GetGames
        /// </summary>
        [Fact]
        public void GetGamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? joinable = null;
            //bool? unprotected = null;
            //var response = instance.GetGames(joinable, unprotected);
            //Assert.IsType<List<int>> (response, "response is List<int>");
        }
        
        /// <summary>
        /// Test GetProgrammingCard
        /// </summary>
        [Fact]
        public void GetProgrammingCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int gameId = null;
            //int statementId = null;
            //var response = instance.GetProgrammingCard(gameId, statementId);
            //Assert.IsType<RobotCommand> (response, "response is RobotCommand");
        }
        
        /// <summary>
        /// Test GetProgrammingCardIds
        /// </summary>
        [Fact]
        public void GetProgrammingCardIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int gameId = null;
            //var response = instance.GetProgrammingCardIds(gameId);
            //Assert.IsType<List<int>> (response, "response is List<int>");
        }
        
        /// <summary>
        /// Test GetProgrammingCards
        /// </summary>
        [Fact]
        public void GetProgrammingCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int gameId = null;
            //var response = instance.GetProgrammingCards(gameId);
            //Assert.IsType<List<RobotCommand>> (response, "response is List<RobotCommand>");
        }
        
    }

}
