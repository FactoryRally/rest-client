/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v2.13.3
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tgm.Roborally.Api.Client.OpenAPIDateConverter;

namespace Tgm.Roborally.Api.Model
{
    /// <summary>
    /// Called when a timer is started
    /// </summary>
    [DataContract]
    public partial class TimerStartEvent :  IEquatable<TimerStartEvent>, IValidatableObject
    {
        /// <summary>
        /// Describes the usage of the timer
        /// </summary>
        /// <value>Describes the usage of the timer</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubjectEnum
        {
            /// <summary>
            /// Enum Buyupgrades for value: buy_upgrades
            /// </summary>
            [EnumMember(Value = "buy_upgrades")]
            Buyupgrades = 1

        }

        /// <summary>
        /// Describes the usage of the timer
        /// </summary>
        /// <value>Describes the usage of the timer</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public SubjectEnum Subject { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimerStartEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimerStartEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimerStartEvent" /> class.
        /// </summary>
        /// <param name="subject">Describes the usage of the timer (required).</param>
        /// <param name="endTime">The time in ms since epoche when the timer will ends (required).</param>
        /// <param name="duration">the duration of the timer in ms (required) (default to 20000).</param>
        /// <param name="passable">if this is true the active player can pass the event (required) (default to false).</param>
        /// <param name="robotsActive">The entites that are able to act during this timer (required).</param>
        public TimerStartEvent(SubjectEnum subject = default(SubjectEnum), long endTime = default(long), int duration = 20000, bool passable = false, List<int> robotsActive = default(List<int>))
        {
            this.Subject = subject;
            this.EndTime = endTime;
            this.Duration = duration;
            this.Passable = passable;
            // to ensure "robotsActive" is required (not null)
            this.RobotsActive = robotsActive ?? throw new ArgumentNullException("robotsActive is a required property for TimerStartEvent and cannot be null");
        }
        
        /// <summary>
        /// The time in ms since epoche when the timer will ends
        /// </summary>
        /// <value>The time in ms since epoche when the timer will ends</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public long EndTime { get; set; }

        /// <summary>
        /// the duration of the timer in ms
        /// </summary>
        /// <value>the duration of the timer in ms</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int Duration { get; set; }

        /// <summary>
        /// if this is true the active player can pass the event
        /// </summary>
        /// <value>if this is true the active player can pass the event</value>
        [DataMember(Name="passable", EmitDefaultValue=false)]
        public bool Passable { get; set; }

        /// <summary>
        /// The entites that are able to act during this timer
        /// </summary>
        /// <value>The entites that are able to act during this timer</value>
        [DataMember(Name="robots_active", EmitDefaultValue=false)]
        public List<int> RobotsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimerStartEvent {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Passable: ").Append(Passable).Append("\n");
            sb.Append("  RobotsActive: ").Append(RobotsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimerStartEvent);
        }

        /// <summary>
        /// Returns true if TimerStartEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of TimerStartEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimerStartEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Subject == input.Subject ||
                    this.Subject.Equals(input.Subject)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    this.EndTime.Equals(input.EndTime)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Passable == input.Passable ||
                    this.Passable.Equals(input.Passable)
                ) && 
                (
                    this.RobotsActive == input.RobotsActive ||
                    this.RobotsActive != null &&
                    input.RobotsActive != null &&
                    this.RobotsActive.SequenceEqual(input.RobotsActive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Subject.GetHashCode();
                hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                hashCode = hashCode * 59 + this.Duration.GetHashCode();
                hashCode = hashCode * 59 + this.Passable.GetHashCode();
                if (this.RobotsActive != null)
                    hashCode = hashCode * 59 + this.RobotsActive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Duration (int) minimum
            if(this.Duration < (int)1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Duration, must be a value greater than or equal to 1000.", new [] { "Duration" });
            }

            yield break;
        }
    }

}
