/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v1.2.1
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tgm.Roborally.Api.Client.OpenAPIDateConverter;

namespace Tgm.Roborally.Api.Model
{
    /// <summary>
    /// The event when a player places or removes an robot command from/to a register
    /// </summary>
    [DataContract]
    public partial class ChangeRegisterEvent :  IEquatable<ChangeRegisterEvent>, IValidatableObject
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Fill for value: fill
            /// </summary>
            [EnumMember(Value = "fill")]
            Fill = 1,

            /// <summary>
            /// Enum Clear for value: clear
            /// </summary>
            [EnumMember(Value = "clear")]
            Clear = 2,

            /// <summary>
            /// Enum Replace for value: replace
            /// </summary>
            [EnumMember(Value = "replace")]
            Replace = 3

        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeRegisterEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangeRegisterEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeRegisterEvent" /> class.
        /// </summary>
        /// <param name="action">action (required).</param>
        /// <param name="card">The id of an upgrade. **Unique**.</param>
        public ChangeRegisterEvent(ActionEnum action = default(ActionEnum), int card = default(int))
        {
            this.Action = action;
            this.Card = card;
        }
        
        /// <summary>
        /// The id of an upgrade. **Unique**
        /// </summary>
        /// <value>The id of an upgrade. **Unique**</value>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public int Card { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeRegisterEvent {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeRegisterEvent);
        }

        /// <summary>
        /// Returns true if ChangeRegisterEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeRegisterEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeRegisterEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                ) && 
                (
                    this.Card == input.Card ||
                    this.Card.Equals(input.Card)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Action.GetHashCode();
                hashCode = hashCode * 59 + this.Card.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Card (int) maximum
            if(this.Card > (int)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Card, must be a value less than or equal to 10000.", new [] { "Card" });
            }

            // Card (int) minimum
            if(this.Card < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Card, must be a value greater than or equal to 0.", new [] { "Card" });
            }

            yield break;
        }
    }

}
