/*
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v2.11.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tgm.Roborally.Api.Client.OpenAPIDateConverter;

namespace Tgm.Roborally.Api.Model
{
    /// <summary>
    /// A timer run out
    /// </summary>
    [DataContract(Name = "TimeElapsedEvent")]
    public partial class TimeElapsedEvent : IEquatable<TimeElapsedEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeElapsedEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimeElapsedEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeElapsedEvent" /> class.
        /// </summary>
        /// <param name="originalDuration">The duration of the timer  (required).</param>
        /// <param name="context">(optional) information about the elapsed timer.</param>
        public TimeElapsedEvent(int originalDuration = default(int), Object context = default(Object))
        {
            this.OriginalDuration = originalDuration;
            this.Context = context;
        }

        /// <summary>
        /// The duration of the timer 
        /// </summary>
        /// <value>The duration of the timer </value>
        [DataMember(Name = "original_duration", IsRequired = true, EmitDefaultValue = false)]
        public int OriginalDuration { get; set; }

        /// <summary>
        /// (optional) information about the elapsed timer
        /// </summary>
        /// <value>(optional) information about the elapsed timer</value>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public Object Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeElapsedEvent {\n");
            sb.Append("  OriginalDuration: ").Append(OriginalDuration).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeElapsedEvent);
        }

        /// <summary>
        /// Returns true if TimeElapsedEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeElapsedEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeElapsedEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OriginalDuration == input.OriginalDuration ||
                    this.OriginalDuration.Equals(input.OriginalDuration)
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.OriginalDuration.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OriginalDuration (int) minimum
            if(this.OriginalDuration < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OriginalDuration, must be a value greater than or equal to 0.", new [] { "OriginalDuration" });
            }

            yield break;
        }
    }

}
