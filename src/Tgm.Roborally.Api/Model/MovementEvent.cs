/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v1.2.1
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Tgm.Roborally.Api.Client.OpenAPIDateConverter;

namespace Tgm.Roborally.Api.Model
{
    /// <summary>
    /// Describes the movement of a entity
    /// </summary>
    [DataContract]
    public partial class MovementEvent :  IEquatable<MovementEvent>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public Direction? Direction { get; set; }
        /// <summary>
        /// Gets or Sets Rotation
        /// </summary>
        [DataMember(Name="rotation", EmitDefaultValue=false)]
        public Rotation? Rotation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MovementEvent" /> class.
        /// </summary>
        /// <param name="entity">The unique identification of this entity. &lt;br&gt; *!!!* This is not the id of the player&lt;br&gt; This value will be autogenerated by the api and is read only.</param>
        /// <param name="direction">direction.</param>
        /// <param name="movementAmmount">How far (in tiles) the movement was executed.</param>
        /// <param name="rotation">rotation.</param>
        /// <param name="rotationTimes">The number of times (90°) the robot turns.</param>
        /// <param name="from">from.</param>
        /// <param name="to">to.</param>
        public MovementEvent(int entity = default(int), Direction? direction = default(Direction?), int movementAmmount = default(int), Rotation? rotation = default(Rotation?), int rotationTimes = default(int), Position from = default(Position), Position to = default(Position))
        {
            this.Entity = entity;
            this.Direction = direction;
            this.MovementAmmount = movementAmmount;
            this.Rotation = rotation;
            this.RotationTimes = rotationTimes;
            this.From = from;
            this.To = to;
        }
        
        /// <summary>
        /// The unique identification of this entity. &lt;br&gt; *!!!* This is not the id of the player&lt;br&gt; This value will be autogenerated by the api and is read only
        /// </summary>
        /// <value>The unique identification of this entity. &lt;br&gt; *!!!* This is not the id of the player&lt;br&gt; This value will be autogenerated by the api and is read only</value>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public int Entity { get; set; }

        /// <summary>
        /// How far (in tiles) the movement was executed
        /// </summary>
        /// <value>How far (in tiles) the movement was executed</value>
        [DataMember(Name="movement-ammount", EmitDefaultValue=false)]
        public int MovementAmmount { get; set; }

        /// <summary>
        /// The number of times (90°) the robot turns
        /// </summary>
        /// <value>The number of times (90°) the robot turns</value>
        [DataMember(Name="rotation-times", EmitDefaultValue=false)]
        public int RotationTimes { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public Position From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public Position To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MovementEvent {\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  MovementAmmount: ").Append(MovementAmmount).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  RotationTimes: ").Append(RotationTimes).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MovementEvent);
        }

        /// <summary>
        /// Returns true if MovementEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of MovementEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MovementEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Entity == input.Entity ||
                    this.Entity.Equals(input.Entity)
                ) && 
                (
                    this.Direction == input.Direction ||
                    this.Direction.Equals(input.Direction)
                ) && 
                (
                    this.MovementAmmount == input.MovementAmmount ||
                    this.MovementAmmount.Equals(input.MovementAmmount)
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    this.Rotation.Equals(input.Rotation)
                ) && 
                (
                    this.RotationTimes == input.RotationTimes ||
                    this.RotationTimes.Equals(input.RotationTimes)
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Entity.GetHashCode();
                hashCode = hashCode * 59 + this.Direction.GetHashCode();
                hashCode = hashCode * 59 + this.MovementAmmount.GetHashCode();
                hashCode = hashCode * 59 + this.Rotation.GetHashCode();
                hashCode = hashCode * 59 + this.RotationTimes.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Entity (int) minimum
            if(this.Entity < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Entity, must be a value greater than or equal to 0.", new [] { "Entity" });
            }

            // MovementAmmount (int) maximum
            if(this.MovementAmmount > (int)50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MovementAmmount, must be a value less than or equal to 50.", new [] { "MovementAmmount" });
            }

            // MovementAmmount (int) minimum
            if(this.MovementAmmount < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MovementAmmount, must be a value greater than or equal to 0.", new [] { "MovementAmmount" });
            }

            // RotationTimes (int) maximum
            if(this.RotationTimes > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RotationTimes, must be a value less than or equal to 2.", new [] { "RotationTimes" });
            }

            // RotationTimes (int) minimum
            if(this.RotationTimes < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RotationTimes, must be a value greater than or equal to 0.", new [] { "RotationTimes" });
            }

            yield break;
        }
    }

}
