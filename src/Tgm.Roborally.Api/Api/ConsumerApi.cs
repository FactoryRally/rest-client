/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v2.1.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsumerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Register Consumers
        /// </summary>
        /// <remarks>
        /// Add a consumer to create a *virtual* (*spectating*) player to consume events
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="consumerRegistration">Information about the joining consumer (optional)</param>
        /// <returns>JoinResponse</returns>
        JoinResponse RegisterConsumer (int gameId, ConsumerRegistration consumerRegistration = default(ConsumerRegistration));

        /// <summary>
        /// Register Consumers
        /// </summary>
        /// <remarks>
        /// Add a consumer to create a *virtual* (*spectating*) player to consume events
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="consumerRegistration">Information about the joining consumer (optional)</param>
        /// <returns>ApiResponse of JoinResponse</returns>
        ApiResponse<JoinResponse> RegisterConsumerWithHttpInfo (int gameId, ConsumerRegistration consumerRegistration = default(ConsumerRegistration));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsumerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Register Consumers
        /// </summary>
        /// <remarks>
        /// Add a consumer to create a *virtual* (*spectating*) player to consume events
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="consumerRegistration">Information about the joining consumer (optional)</param>
        /// <returns>Task of JoinResponse</returns>
        System.Threading.Tasks.Task<JoinResponse> RegisterConsumerAsync (int gameId, ConsumerRegistration consumerRegistration = default(ConsumerRegistration));

        /// <summary>
        /// Register Consumers
        /// </summary>
        /// <remarks>
        /// Add a consumer to create a *virtual* (*spectating*) player to consume events
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="consumerRegistration">Information about the joining consumer (optional)</param>
        /// <returns>Task of ApiResponse (JoinResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JoinResponse>> RegisterConsumerAsyncWithHttpInfo (int gameId, ConsumerRegistration consumerRegistration = default(ConsumerRegistration));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConsumerApi : IConsumerApiSync, IConsumerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConsumerApi : IConsumerApi
    {
        private Tgm.Roborally.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConsumerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConsumerApi(String basePath)
        {
            this.Configuration = Tgm.Roborally.Api.Client.Configuration.MergeConfigurations(
                Tgm.Roborally.Api.Client.GlobalConfiguration.Instance,
                new Tgm.Roborally.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConsumerApi(Tgm.Roborally.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Tgm.Roborally.Api.Client.Configuration.MergeConfigurations(
                Tgm.Roborally.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsumerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConsumerApi(Tgm.Roborally.Api.Client.ISynchronousClient client,Tgm.Roborally.Api.Client.IAsynchronousClient asyncClient, Tgm.Roborally.Api.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Tgm.Roborally.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Tgm.Roborally.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tgm.Roborally.Api.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tgm.Roborally.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Register Consumers Add a consumer to create a *virtual* (*spectating*) player to consume events
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="consumerRegistration">Information about the joining consumer (optional)</param>
        /// <returns>JoinResponse</returns>
        public JoinResponse RegisterConsumer (int gameId, ConsumerRegistration consumerRegistration = default(ConsumerRegistration))
        {
             Tgm.Roborally.Api.Client.ApiResponse<JoinResponse> localVarResponse = RegisterConsumerWithHttpInfo(gameId, consumerRegistration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register Consumers Add a consumer to create a *virtual* (*spectating*) player to consume events
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="consumerRegistration">Information about the joining consumer (optional)</param>
        /// <returns>ApiResponse of JoinResponse</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< JoinResponse > RegisterConsumerWithHttpInfo (int gameId, ConsumerRegistration consumerRegistration = default(ConsumerRegistration))
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.Data = consumerRegistration;


            // make the HTTP request
            var localVarResponse = this.Client.Post< JoinResponse >("/games/{game_id}/consumers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterConsumer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register Consumers Add a consumer to create a *virtual* (*spectating*) player to consume events
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="consumerRegistration">Information about the joining consumer (optional)</param>
        /// <returns>Task of JoinResponse</returns>
        public async System.Threading.Tasks.Task<JoinResponse> RegisterConsumerAsync (int gameId, ConsumerRegistration consumerRegistration = default(ConsumerRegistration))
        {
             Tgm.Roborally.Api.Client.ApiResponse<JoinResponse> localVarResponse = await RegisterConsumerAsyncWithHttpInfo(gameId, consumerRegistration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register Consumers Add a consumer to create a *virtual* (*spectating*) player to consume events
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="consumerRegistration">Information about the joining consumer (optional)</param>
        /// <returns>Task of ApiResponse (JoinResponse)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<JoinResponse>> RegisterConsumerAsyncWithHttpInfo (int gameId, ConsumerRegistration consumerRegistration = default(ConsumerRegistration))
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.Data = consumerRegistration;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<JoinResponse>("/games/{game_id}/consumers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterConsumer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
