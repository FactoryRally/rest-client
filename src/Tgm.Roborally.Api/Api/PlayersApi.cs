/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v2.2.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set Robots
        /// </summary>
        /// <remarks>
        /// # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns></returns>
        void ChooseRobot (int gameId, int playerId, List<Robots> robots = default(List<Robots>));

        /// <summary>
        /// Set Robots
        /// </summary>
        /// <remarks>
        /// # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChooseRobotWithHttpInfo (int gameId, int playerId, List<Robots> robots = default(List<Robots>));
        /// <summary>
        /// Get all players
        /// </summary>
        /// <remarks>
        /// Returns the index of all players
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetAllPlayers (int gameId);

        /// <summary>
        /// Get all players
        /// </summary>
        /// <remarks>
        /// Returns the index of all players
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetAllPlayersWithHttpInfo (int gameId);
        /// <summary>
        /// Get player
        /// </summary>
        /// <remarks>
        /// Get closer information about the player
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Player</returns>
        Player GetPlayer (int gameId, int playerId);

        /// <summary>
        /// Get player
        /// </summary>
        /// <remarks>
        /// Get closer information about the player
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>ApiResponse of Player</returns>
        ApiResponse<Player> GetPlayerWithHttpInfo (int gameId, int playerId);
        /// <summary>
        /// Join game
        /// </summary>
        /// <remarks>
        /// Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <param name="name">The name to be displayed as username (optional)</param>
        /// <returns>JoinResponse</returns>
        JoinResponse Join (int gameId, string password = default(string), string name = default(string));

        /// <summary>
        /// Join game
        /// </summary>
        /// <remarks>
        /// Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <param name="name">The name to be displayed as username (optional)</param>
        /// <returns>ApiResponse of JoinResponse</returns>
        ApiResponse<JoinResponse> JoinWithHttpInfo (int gameId, string password = default(string), string name = default(string));
        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes a player from the game. This can be done by the player itsself or by the host.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns></returns>
        void KickPlayer (int gameId, int playerId);

        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes a player from the game. This can be done by the player itsself or by the host.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> KickPlayerWithHttpInfo (int gameId, int playerId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Set Robots
        /// </summary>
        /// <remarks>
        /// # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChooseRobotAsync (int gameId, int playerId, List<Robots> robots = default(List<Robots>));

        /// <summary>
        /// Set Robots
        /// </summary>
        /// <remarks>
        /// # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChooseRobotAsyncWithHttpInfo (int gameId, int playerId, List<Robots> robots = default(List<Robots>));
        /// <summary>
        /// Get all players
        /// </summary>
        /// <remarks>
        /// Returns the index of all players
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetAllPlayersAsync (int gameId);

        /// <summary>
        /// Get all players
        /// </summary>
        /// <remarks>
        /// Returns the index of all players
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetAllPlayersAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Get player
        /// </summary>
        /// <remarks>
        /// Get closer information about the player
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Task of Player</returns>
        System.Threading.Tasks.Task<Player> GetPlayerAsync (int gameId, int playerId);

        /// <summary>
        /// Get player
        /// </summary>
        /// <remarks>
        /// Get closer information about the player
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        System.Threading.Tasks.Task<ApiResponse<Player>> GetPlayerAsyncWithHttpInfo (int gameId, int playerId);
        /// <summary>
        /// Join game
        /// </summary>
        /// <remarks>
        /// Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <param name="name">The name to be displayed as username (optional)</param>
        /// <returns>Task of JoinResponse</returns>
        System.Threading.Tasks.Task<JoinResponse> JoinAsync (int gameId, string password = default(string), string name = default(string));

        /// <summary>
        /// Join game
        /// </summary>
        /// <remarks>
        /// Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <param name="name">The name to be displayed as username (optional)</param>
        /// <returns>Task of ApiResponse (JoinResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JoinResponse>> JoinAsyncWithHttpInfo (int gameId, string password = default(string), string name = default(string));
        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes a player from the game. This can be done by the player itsself or by the host.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task KickPlayerAsync (int gameId, int playerId);

        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes a player from the game. This can be done by the player itsself or by the host.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> KickPlayerAsyncWithHttpInfo (int gameId, int playerId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApi : IPlayersApiSync, IPlayersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayersApi : IPlayersApi
    {
        private Tgm.Roborally.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi(String basePath)
        {
            this.Configuration = Tgm.Roborally.Api.Client.Configuration.MergeConfigurations(
                Tgm.Roborally.Api.Client.GlobalConfiguration.Instance,
                new Tgm.Roborally.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayersApi(Tgm.Roborally.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Tgm.Roborally.Api.Client.Configuration.MergeConfigurations(
                Tgm.Roborally.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlayersApi(Tgm.Roborally.Api.Client.ISynchronousClient client,Tgm.Roborally.Api.Client.IAsynchronousClient asyncClient, Tgm.Roborally.Api.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Tgm.Roborally.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Tgm.Roborally.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tgm.Roborally.Api.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tgm.Roborally.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Set Robots # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns></returns>
        public void ChooseRobot (int gameId, int playerId, List<Robots> robots = default(List<Robots>))
        {
             ChooseRobotWithHttpInfo(gameId, playerId, robots);
        }

        /// <summary>
        /// Set Robots # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tgm.Roborally.Api.Client.ApiResponse<Object> ChooseRobotWithHttpInfo (int gameId, int playerId, List<Robots> robots = default(List<Robots>))
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("player_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            localVarRequestOptions.Data = robots;

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/games/{game_id}/players/{player_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChooseRobot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Robots # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChooseRobotAsync (int gameId, int playerId, List<Robots> robots = default(List<Robots>))
        {
             await ChooseRobotAsyncWithHttpInfo(gameId, playerId, robots);

        }

        /// <summary>
        /// Set Robots # DEPRECATET &gt; This feature is useless in this version. It will be usefull in newer versions  Sets the type of robot(s) the player is controlling
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <param name="robots">The robots assigned to the player (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Object>> ChooseRobotAsyncWithHttpInfo (int gameId, int playerId, List<Robots> robots = default(List<Robots>))
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("player_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            localVarRequestOptions.Data = robots;

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/games/{game_id}/players/{player_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChooseRobot", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all players Returns the index of all players
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetAllPlayers (int gameId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<int>> localVarResponse = GetAllPlayersWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all players Returns the index of all players
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< List<int> > GetAllPlayersWithHttpInfo (int gameId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<int> >("/games/{game_id}/players/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPlayers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all players Returns the index of all players
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetAllPlayersAsync (int gameId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<int>> localVarResponse = await GetAllPlayersAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all players Returns the index of all players
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<List<int>>> GetAllPlayersAsyncWithHttpInfo (int gameId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<int>>("/games/{game_id}/players/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPlayers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get player Get closer information about the player
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Player</returns>
        public Player GetPlayer (int gameId, int playerId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<Player> localVarResponse = GetPlayerWithHttpInfo(gameId, playerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get player Get closer information about the player
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>ApiResponse of Player</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< Player > GetPlayerWithHttpInfo (int gameId, int playerId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("player_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(playerId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Player >("/games/{game_id}/players/{player_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get player Get closer information about the player
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> GetPlayerAsync (int gameId, int playerId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<Player> localVarResponse = await GetPlayerAsyncWithHttpInfo(gameId, playerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get player Get closer information about the player
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Player>> GetPlayerAsyncWithHttpInfo (int gameId, int playerId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("player_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(playerId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Player>("/games/{game_id}/players/{player_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join game Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <param name="name">The name to be displayed as username (optional)</param>
        /// <returns>JoinResponse</returns>
        public JoinResponse Join (int gameId, string password = default(string), string name = default(string))
        {
             Tgm.Roborally.Api.Client.ApiResponse<JoinResponse> localVarResponse = JoinWithHttpInfo(gameId, password, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Join game Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <param name="name">The name to be displayed as username (optional)</param>
        /// <returns>ApiResponse of JoinResponse</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< JoinResponse > JoinWithHttpInfo (int gameId, string password = default(string), string name = default(string))
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post< JoinResponse >("/games/{game_id}/players/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Join", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join game Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <param name="name">The name to be displayed as username (optional)</param>
        /// <returns>Task of JoinResponse</returns>
        public async System.Threading.Tasks.Task<JoinResponse> JoinAsync (int gameId, string password = default(string), string name = default(string))
        {
             Tgm.Roborally.Api.Client.ApiResponse<JoinResponse> localVarResponse = await JoinAsyncWithHttpInfo(gameId, password, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Join game Join the given game. You will get your ID by doing this, if you already in the game you can get your ID again if you lost it.&lt;br&gt; The id is neccessary for any further API calls
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="password">The password of the game if the lobby is password protected (optional)</param>
        /// <param name="name">The name to be displayed as username (optional)</param>
        /// <returns>Task of ApiResponse (JoinResponse)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<JoinResponse>> JoinAsyncWithHttpInfo (int gameId, string password = default(string), string name = default(string))
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            if (password != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "password", password));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<JoinResponse>("/games/{game_id}/players/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Join", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Player Removes a player from the game. This can be done by the player itsself or by the host.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns></returns>
        public void KickPlayer (int gameId, int playerId)
        {
             KickPlayerWithHttpInfo(gameId, playerId);
        }

        /// <summary>
        /// Remove Player Removes a player from the game. This can be done by the player itsself or by the host.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tgm.Roborally.Api.Client.ApiResponse<Object> KickPlayerWithHttpInfo (int gameId, int playerId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("player_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(playerId)); // path parameter

            // authentication (admin-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("skey")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "skey", this.Configuration.GetApiKeyWithPrefix("skey")));
            }
            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/games/{game_id}/players/{player_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickPlayer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Player Removes a player from the game. This can be done by the player itsself or by the host.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task KickPlayerAsync (int gameId, int playerId)
        {
             await KickPlayerAsyncWithHttpInfo(gameId, playerId);

        }

        /// <summary>
        /// Remove Player Removes a player from the game. This can be done by the player itsself or by the host.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="playerId">the id of the player to interact with</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Object>> KickPlayerAsyncWithHttpInfo (int gameId, int playerId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("player_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(playerId)); // path parameter

            // authentication (admin-access) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("skey")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "skey", this.Configuration.GetApiKeyWithPrefix("skey")));
            }
            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/games/{game_id}/players/{player_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("KickPlayer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
