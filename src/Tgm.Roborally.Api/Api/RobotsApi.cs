/* 
 * Robot Rally Game logic engine
 *
 * This api controlls the flow of a game and provides it's data. It is desiged to be RESTfull so the structure works simmilar as file system. The service will run and only work in a local network, `game.host` is the IP of the Computer hosting the game and will be found via a IP scan
 *
 * The version of the OpenAPI document: v2.14.0
 * Contact: nbrugger@student.tgm.ac.at
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Tgm.Roborally.Api.Client;
using Tgm.Roborally.Api.Model;

namespace Tgm.Roborally.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRobotsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// clear registers
        /// </summary>
        /// <remarks>
        /// Emptys all register of the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns></returns>
        void ClearRegisters (int gameId, int robotId);

        /// <summary>
        /// clear registers
        /// </summary>
        /// <remarks>
        /// Emptys all register of the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearRegistersWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Clear Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Removes all upgrades from a robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns></returns>
        void ClearUpgrades (int gameId, int robotId);

        /// <summary>
        /// Clear Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Removes all upgrades from a robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearUpgradesWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Add Entity Action to stack
        /// </summary>
        /// <remarks>
        /// Adds an action to the stack. The stack is processed using *first in first out*
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns></returns>
        void DoEntityAction (int gameId, int robotId, EntityAction entityAction = default(EntityAction));

        /// <summary>
        /// Add Entity Action to stack
        /// </summary>
        /// <remarks>
        /// Adds an action to the stack. The stack is processed using *first in first out*
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DoEntityActionWithHttpInfo (int gameId, int robotId, EntityAction entityAction = default(EntityAction));
        /// <summary>
        /// Get Robot action stack
        /// </summary>
        /// <remarks>
        /// Retuns a list od all actions in the stack
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>List&lt;EntityAction&gt;</returns>
        List<EntityAction> GetActionStack (int gameId, int robotId);

        /// <summary>
        /// Get Robot action stack
        /// </summary>
        /// <remarks>
        /// Retuns a list od all actions in the stack
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of List&lt;EntityAction&gt;</returns>
        ApiResponse<List<EntityAction>> GetActionStackWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Returns the upgrades installed on the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetInstalledUpgrades (int gameId, int robotId);

        /// <summary>
        /// Get Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Returns the upgrades installed on the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetInstalledUpgradesWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Aviable actions
        /// </summary>
        /// <remarks>
        /// Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>List&lt;EntityEventOportunity&gt;</returns>
        List<EntityEventOportunity> GetPossibleActions (int gameId, int robotId);

        /// <summary>
        /// Get Aviable actions
        /// </summary>
        /// <remarks>
        /// Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of List&lt;EntityEventOportunity&gt;</returns>
        ApiResponse<List<EntityEventOportunity>> GetPossibleActionsWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Register Content
        /// </summary>
        /// <remarks>
        /// Returns the Programming card in the robots register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <returns>RobotCommand</returns>
        RobotCommand GetRegisterContent (int gameId, int robotId, int register);

        /// <summary>
        /// Get Register Content
        /// </summary>
        /// <remarks>
        /// Returns the Programming card in the robots register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <returns>ApiResponse of RobotCommand</returns>
        ApiResponse<RobotCommand> GetRegisterContentWithHttpInfo (int gameId, int robotId, int register);
        /// <summary>
        /// Get register information
        /// </summary>
        /// <remarks>
        /// Returns the content of the registers
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>List&lt;RobotCommand&gt;</returns>
        List<RobotCommand> GetRegisters (int gameId, int robotId);

        /// <summary>
        /// Get register information
        /// </summary>
        /// <remarks>
        /// Returns the content of the registers
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of List&lt;RobotCommand&gt;</returns>
        ApiResponse<List<RobotCommand>> GetRegistersWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Robot Informations
        /// </summary>
        /// <remarks>
        /// Returns the status and info about the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>RobotInfo</returns>
        RobotInfo GetRobotStats (int gameId, int robotId);

        /// <summary>
        /// Get Robot Informations
        /// </summary>
        /// <remarks>
        /// Returns the status and info about the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of RobotInfo</returns>
        ApiResponse<RobotInfo> GetRobotStatsWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get all robots
        /// </summary>
        /// <remarks>
        /// Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>List&lt;int&gt;</returns>
        List<int> GetRobots (int gameId);

        /// <summary>
        /// Get all robots
        /// </summary>
        /// <remarks>
        /// Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> GetRobotsWithHttpInfo (int gameId);
        /// <summary>
        /// Remove Upgrade
        /// </summary>
        /// <remarks>
        /// Removes a paticular upgrade from the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="upgrade">The id of the upgrade to remove (optional)</param>
        /// <returns></returns>
        void RemoveRobotUpgrade (int gameId, int robotId, int? upgrade = default(int?));

        /// <summary>
        /// Remove Upgrade
        /// </summary>
        /// <remarks>
        /// Removes a paticular upgrade from the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="upgrade">The id of the upgrade to remove (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveRobotUpgradeWithHttpInfo (int gameId, int robotId, int? upgrade = default(int?));
        /// <summary>
        /// Set Register Content
        /// </summary>
        /// <remarks>
        /// Changes the programming card of the robots register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <param name="statementId">The Id of the statement to place here</param>
        /// <returns></returns>
        void SetRegister (int gameId, int robotId, int register, int statementId);

        /// <summary>
        /// Set Register Content
        /// </summary>
        /// <remarks>
        /// Changes the programming card of the robots register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <param name="statementId">The Id of the statement to place here</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetRegisterWithHttpInfo (int gameId, int robotId, int register, int statementId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRobotsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// clear registers
        /// </summary>
        /// <remarks>
        /// Emptys all register of the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearRegistersAsync (int gameId, int robotId);

        /// <summary>
        /// clear registers
        /// </summary>
        /// <remarks>
        /// Emptys all register of the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearRegistersAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Clear Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Removes all upgrades from a robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearUpgradesAsync (int gameId, int robotId);

        /// <summary>
        /// Clear Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Removes all upgrades from a robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearUpgradesAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Add Entity Action to stack
        /// </summary>
        /// <remarks>
        /// Adds an action to the stack. The stack is processed using *first in first out*
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DoEntityActionAsync (int gameId, int robotId, EntityAction entityAction = default(EntityAction));

        /// <summary>
        /// Add Entity Action to stack
        /// </summary>
        /// <remarks>
        /// Adds an action to the stack. The stack is processed using *first in first out*
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DoEntityActionAsyncWithHttpInfo (int gameId, int robotId, EntityAction entityAction = default(EntityAction));
        /// <summary>
        /// Get Robot action stack
        /// </summary>
        /// <remarks>
        /// Retuns a list od all actions in the stack
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of List&lt;EntityAction&gt;</returns>
        System.Threading.Tasks.Task<List<EntityAction>> GetActionStackAsync (int gameId, int robotId);

        /// <summary>
        /// Get Robot action stack
        /// </summary>
        /// <remarks>
        /// Retuns a list od all actions in the stack
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;EntityAction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityAction>>> GetActionStackAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Returns the upgrades installed on the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetInstalledUpgradesAsync (int gameId, int robotId);

        /// <summary>
        /// Get Robot Upgrades
        /// </summary>
        /// <remarks>
        /// Returns the upgrades installed on the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetInstalledUpgradesAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Aviable actions
        /// </summary>
        /// <remarks>
        /// Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of List&lt;EntityEventOportunity&gt;</returns>
        System.Threading.Tasks.Task<List<EntityEventOportunity>> GetPossibleActionsAsync (int gameId, int robotId);

        /// <summary>
        /// Get Aviable actions
        /// </summary>
        /// <remarks>
        /// Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;EntityEventOportunity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityEventOportunity>>> GetPossibleActionsAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Register Content
        /// </summary>
        /// <remarks>
        /// Returns the Programming card in the robots register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <returns>Task of RobotCommand</returns>
        System.Threading.Tasks.Task<RobotCommand> GetRegisterContentAsync (int gameId, int robotId, int register);

        /// <summary>
        /// Get Register Content
        /// </summary>
        /// <remarks>
        /// Returns the Programming card in the robots register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <returns>Task of ApiResponse (RobotCommand)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobotCommand>> GetRegisterContentAsyncWithHttpInfo (int gameId, int robotId, int register);
        /// <summary>
        /// Get register information
        /// </summary>
        /// <remarks>
        /// Returns the content of the registers
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of List&lt;RobotCommand&gt;</returns>
        System.Threading.Tasks.Task<List<RobotCommand>> GetRegistersAsync (int gameId, int robotId);

        /// <summary>
        /// Get register information
        /// </summary>
        /// <remarks>
        /// Returns the content of the registers
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;RobotCommand&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RobotCommand>>> GetRegistersAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get Robot Informations
        /// </summary>
        /// <remarks>
        /// Returns the status and info about the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of RobotInfo</returns>
        System.Threading.Tasks.Task<RobotInfo> GetRobotStatsAsync (int gameId, int robotId);

        /// <summary>
        /// Get Robot Informations
        /// </summary>
        /// <remarks>
        /// Returns the status and info about the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (RobotInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobotInfo>> GetRobotStatsAsyncWithHttpInfo (int gameId, int robotId);
        /// <summary>
        /// Get all robots
        /// </summary>
        /// <remarks>
        /// Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> GetRobotsAsync (int gameId);

        /// <summary>
        /// Get all robots
        /// </summary>
        /// <remarks>
        /// Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> GetRobotsAsyncWithHttpInfo (int gameId);
        /// <summary>
        /// Remove Upgrade
        /// </summary>
        /// <remarks>
        /// Removes a paticular upgrade from the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="upgrade">The id of the upgrade to remove (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveRobotUpgradeAsync (int gameId, int robotId, int? upgrade = default(int?));

        /// <summary>
        /// Remove Upgrade
        /// </summary>
        /// <remarks>
        /// Removes a paticular upgrade from the robot
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="upgrade">The id of the upgrade to remove (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveRobotUpgradeAsyncWithHttpInfo (int gameId, int robotId, int? upgrade = default(int?));
        /// <summary>
        /// Set Register Content
        /// </summary>
        /// <remarks>
        /// Changes the programming card of the robots register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <param name="statementId">The Id of the statement to place here</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetRegisterAsync (int gameId, int robotId, int register, int statementId);

        /// <summary>
        /// Set Register Content
        /// </summary>
        /// <remarks>
        /// Changes the programming card of the robots register
        /// </remarks>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <param name="statementId">The Id of the statement to place here</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetRegisterAsyncWithHttpInfo (int gameId, int robotId, int register, int statementId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRobotsApi : IRobotsApiSync, IRobotsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RobotsApi : IRobotsApi
    {
        private Tgm.Roborally.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RobotsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RobotsApi(String basePath)
        {
            this.Configuration = Tgm.Roborally.Api.Client.Configuration.MergeConfigurations(
                Tgm.Roborally.Api.Client.GlobalConfiguration.Instance,
                new Tgm.Roborally.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RobotsApi(Tgm.Roborally.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Tgm.Roborally.Api.Client.Configuration.MergeConfigurations(
                Tgm.Roborally.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Tgm.Roborally.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RobotsApi(Tgm.Roborally.Api.Client.ISynchronousClient client,Tgm.Roborally.Api.Client.IAsynchronousClient asyncClient, Tgm.Roborally.Api.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Tgm.Roborally.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Tgm.Roborally.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Tgm.Roborally.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Tgm.Roborally.Api.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Tgm.Roborally.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// clear registers Emptys all register of the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns></returns>
        public void ClearRegisters (int gameId, int robotId)
        {
             ClearRegistersWithHttpInfo(gameId, robotId);
        }

        /// <summary>
        /// clear registers Emptys all register of the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tgm.Roborally.Api.Client.ApiResponse<Object> ClearRegistersWithHttpInfo (int gameId, int robotId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/games/{game_id}/entities/robots/{robot_id}/registers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearRegisters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// clear registers Emptys all register of the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearRegistersAsync (int gameId, int robotId)
        {
             await ClearRegistersAsyncWithHttpInfo(gameId, robotId);

        }

        /// <summary>
        /// clear registers Emptys all register of the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Object>> ClearRegistersAsyncWithHttpInfo (int gameId, int robotId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/games/{game_id}/entities/robots/{robot_id}/registers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearRegisters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Robot Upgrades Removes all upgrades from a robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns></returns>
        public void ClearUpgrades (int gameId, int robotId)
        {
             ClearUpgradesWithHttpInfo(gameId, robotId);
        }

        /// <summary>
        /// Clear Robot Upgrades Removes all upgrades from a robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tgm.Roborally.Api.Client.ApiResponse<Object> ClearUpgradesWithHttpInfo (int gameId, int robotId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/games/{game_id}/entities/robots/{robot_id}/upgrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearUpgrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Robot Upgrades Removes all upgrades from a robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearUpgradesAsync (int gameId, int robotId)
        {
             await ClearUpgradesAsyncWithHttpInfo(gameId, robotId);

        }

        /// <summary>
        /// Clear Robot Upgrades Removes all upgrades from a robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Object>> ClearUpgradesAsyncWithHttpInfo (int gameId, int robotId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/games/{game_id}/entities/robots/{robot_id}/upgrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearUpgrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Entity Action to stack Adds an action to the stack. The stack is processed using *first in first out*
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns></returns>
        public void DoEntityAction (int gameId, int robotId, EntityAction entityAction = default(EntityAction))
        {
             DoEntityActionWithHttpInfo(gameId, robotId, entityAction);
        }

        /// <summary>
        /// Add Entity Action to stack Adds an action to the stack. The stack is processed using *first in first out*
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tgm.Roborally.Api.Client.ApiResponse<Object> DoEntityActionWithHttpInfo (int gameId, int robotId, EntityAction entityAction = default(EntityAction))
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter
            localVarRequestOptions.Data = entityAction;

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/games/{game_id}/entities/robots/{robot_id}/actions/stack/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DoEntityAction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Entity Action to stack Adds an action to the stack. The stack is processed using *first in first out*
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DoEntityActionAsync (int gameId, int robotId, EntityAction entityAction = default(EntityAction))
        {
             await DoEntityActionAsyncWithHttpInfo(gameId, robotId, entityAction);

        }

        /// <summary>
        /// Add Entity Action to stack Adds an action to the stack. The stack is processed using *first in first out*
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="entityAction"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Object>> DoEntityActionAsyncWithHttpInfo (int gameId, int robotId, EntityAction entityAction = default(EntityAction))
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter
            localVarRequestOptions.Data = entityAction;

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/games/{game_id}/entities/robots/{robot_id}/actions/stack/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DoEntityAction", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Robot action stack Retuns a list od all actions in the stack
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>List&lt;EntityAction&gt;</returns>
        public List<EntityAction> GetActionStack (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<EntityAction>> localVarResponse = GetActionStackWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Robot action stack Retuns a list od all actions in the stack
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of List&lt;EntityAction&gt;</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< List<EntityAction> > GetActionStackWithHttpInfo (int gameId, int robotId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EntityAction> >("/games/{game_id}/entities/robots/{robot_id}/actions/stack/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActionStack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Robot action stack Retuns a list od all actions in the stack
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of List&lt;EntityAction&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityAction>> GetActionStackAsync (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<EntityAction>> localVarResponse = await GetActionStackAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Robot action stack Retuns a list od all actions in the stack
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;EntityAction&gt;)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<List<EntityAction>>> GetActionStackAsyncWithHttpInfo (int gameId, int robotId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EntityAction>>("/games/{game_id}/entities/robots/{robot_id}/actions/stack/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActionStack", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Robot Upgrades Returns the upgrades installed on the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetInstalledUpgrades (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<int>> localVarResponse = GetInstalledUpgradesWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Robot Upgrades Returns the upgrades installed on the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< List<int> > GetInstalledUpgradesWithHttpInfo (int gameId, int robotId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<int> >("/games/{game_id}/entities/robots/{robot_id}/upgrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstalledUpgrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Robot Upgrades Returns the upgrades installed on the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetInstalledUpgradesAsync (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<int>> localVarResponse = await GetInstalledUpgradesAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Robot Upgrades Returns the upgrades installed on the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<List<int>>> GetInstalledUpgradesAsyncWithHttpInfo (int gameId, int robotId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<int>>("/games/{game_id}/entities/robots/{robot_id}/upgrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInstalledUpgrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Aviable actions Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>List&lt;EntityEventOportunity&gt;</returns>
        public List<EntityEventOportunity> GetPossibleActions (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<EntityEventOportunity>> localVarResponse = GetPossibleActionsWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Aviable actions Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of List&lt;EntityEventOportunity&gt;</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< List<EntityEventOportunity> > GetPossibleActionsWithHttpInfo (int gameId, int robotId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<EntityEventOportunity> >("/games/{game_id}/entities/robots/{robot_id}/actions/avinable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPossibleActions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Aviable actions Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of List&lt;EntityEventOportunity&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityEventOportunity>> GetPossibleActionsAsync (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<EntityEventOportunity>> localVarResponse = await GetPossibleActionsAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Aviable actions Returns a list of EntityActionTypes which are possible to be executed at the moment.
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;EntityEventOportunity&gt;)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<List<EntityEventOportunity>>> GetPossibleActionsAsyncWithHttpInfo (int gameId, int robotId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<EntityEventOportunity>>("/games/{game_id}/entities/robots/{robot_id}/actions/avinable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPossibleActions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Register Content Returns the Programming card in the robots register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <returns>RobotCommand</returns>
        public RobotCommand GetRegisterContent (int gameId, int robotId, int register)
        {
             Tgm.Roborally.Api.Client.ApiResponse<RobotCommand> localVarResponse = GetRegisterContentWithHttpInfo(gameId, robotId, register);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Register Content Returns the Programming card in the robots register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <returns>ApiResponse of RobotCommand</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< RobotCommand > GetRegisterContentWithHttpInfo (int gameId, int robotId, int register)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter
            localVarRequestOptions.PathParameters.Add("register", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(register)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RobotCommand >("/games/{game_id}/entities/robots/{robot_id}/registers/{register}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegisterContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Register Content Returns the Programming card in the robots register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <returns>Task of RobotCommand</returns>
        public async System.Threading.Tasks.Task<RobotCommand> GetRegisterContentAsync (int gameId, int robotId, int register)
        {
             Tgm.Roborally.Api.Client.ApiResponse<RobotCommand> localVarResponse = await GetRegisterContentAsyncWithHttpInfo(gameId, robotId, register);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Register Content Returns the Programming card in the robots register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <returns>Task of ApiResponse (RobotCommand)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<RobotCommand>> GetRegisterContentAsyncWithHttpInfo (int gameId, int robotId, int register)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter
            localVarRequestOptions.PathParameters.Add("register", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(register)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RobotCommand>("/games/{game_id}/entities/robots/{robot_id}/registers/{register}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegisterContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get register information Returns the content of the registers
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>List&lt;RobotCommand&gt;</returns>
        public List<RobotCommand> GetRegisters (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<RobotCommand>> localVarResponse = GetRegistersWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get register information Returns the content of the registers
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of List&lt;RobotCommand&gt;</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< List<RobotCommand> > GetRegistersWithHttpInfo (int gameId, int robotId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<RobotCommand> >("/games/{game_id}/entities/robots/{robot_id}/registers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegisters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get register information Returns the content of the registers
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of List&lt;RobotCommand&gt;</returns>
        public async System.Threading.Tasks.Task<List<RobotCommand>> GetRegistersAsync (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<RobotCommand>> localVarResponse = await GetRegistersAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get register information Returns the content of the registers
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;RobotCommand&gt;)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<List<RobotCommand>>> GetRegistersAsyncWithHttpInfo (int gameId, int robotId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RobotCommand>>("/games/{game_id}/entities/robots/{robot_id}/registers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegisters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Robot Informations Returns the status and info about the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>RobotInfo</returns>
        public RobotInfo GetRobotStats (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<RobotInfo> localVarResponse = GetRobotStatsWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Robot Informations Returns the status and info about the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>ApiResponse of RobotInfo</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< RobotInfo > GetRobotStatsWithHttpInfo (int gameId, int robotId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RobotInfo >("/games/{game_id}/entities/robots/{robot_id}/info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRobotStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Robot Informations Returns the status and info about the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of RobotInfo</returns>
        public async System.Threading.Tasks.Task<RobotInfo> GetRobotStatsAsync (int gameId, int robotId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<RobotInfo> localVarResponse = await GetRobotStatsAsyncWithHttpInfo(gameId, robotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Robot Informations Returns the status and info about the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <returns>Task of ApiResponse (RobotInfo)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<RobotInfo>> GetRobotStatsAsyncWithHttpInfo (int gameId, int robotId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RobotInfo>("/games/{game_id}/entities/robots/{robot_id}/info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRobotStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all robots Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> GetRobots (int gameId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<int>> localVarResponse = GetRobotsWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all robots Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public Tgm.Roborally.Api.Client.ApiResponse< List<int> > GetRobotsWithHttpInfo (int gameId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<int> >("/games/{game_id}/entities/robots/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRobots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all robots Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> GetRobotsAsync (int gameId)
        {
             Tgm.Roborally.Api.Client.ApiResponse<List<int>> localVarResponse = await GetRobotsAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all robots Returns a list of all robot IDs in this game. &gt; A robot is not a player as a player is able to controll multiple robots
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<List<int>>> GetRobotsAsyncWithHttpInfo (int gameId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<int>>("/games/{game_id}/entities/robots/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRobots", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Upgrade Removes a paticular upgrade from the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="upgrade">The id of the upgrade to remove (optional)</param>
        /// <returns></returns>
        public void RemoveRobotUpgrade (int gameId, int robotId, int? upgrade = default(int?))
        {
             RemoveRobotUpgradeWithHttpInfo(gameId, robotId, upgrade);
        }

        /// <summary>
        /// Remove Upgrade Removes a paticular upgrade from the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="upgrade">The id of the upgrade to remove (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tgm.Roborally.Api.Client.ApiResponse<Object> RemoveRobotUpgradeWithHttpInfo (int gameId, int robotId, int? upgrade = default(int?))
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter
            if (upgrade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "upgrade", upgrade));
            }

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/games/{game_id}/entities/robots/{robot_id}/upgrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRobotUpgrade", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Upgrade Removes a paticular upgrade from the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="upgrade">The id of the upgrade to remove (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveRobotUpgradeAsync (int gameId, int robotId, int? upgrade = default(int?))
        {
             await RemoveRobotUpgradeAsyncWithHttpInfo(gameId, robotId, upgrade);

        }

        /// <summary>
        /// Remove Upgrade Removes a paticular upgrade from the robot
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="upgrade">The id of the upgrade to remove (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Object>> RemoveRobotUpgradeAsyncWithHttpInfo (int gameId, int robotId, int? upgrade = default(int?))
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter
            if (upgrade != null)
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "upgrade", upgrade));
            }

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/games/{game_id}/entities/robots/{robot_id}/upgrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRobotUpgrade", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Register Content Changes the programming card of the robots register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <param name="statementId">The Id of the statement to place here</param>
        /// <returns></returns>
        public void SetRegister (int gameId, int robotId, int register, int statementId)
        {
             SetRegisterWithHttpInfo(gameId, robotId, register, statementId);
        }

        /// <summary>
        /// Set Register Content Changes the programming card of the robots register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <param name="statementId">The Id of the statement to place here</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Tgm.Roborally.Api.Client.ApiResponse<Object> SetRegisterWithHttpInfo (int gameId, int robotId, int register, int statementId)
        {
            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Tgm.Roborally.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter
            localVarRequestOptions.PathParameters.Add("register", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(register)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "statement_id", statementId));

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/games/{game_id}/entities/robots/{robot_id}/registers/{register}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRegister", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Register Content Changes the programming card of the robots register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <param name="statementId">The Id of the statement to place here</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetRegisterAsync (int gameId, int robotId, int register, int statementId)
        {
             await SetRegisterAsyncWithHttpInfo(gameId, robotId, register, statementId);

        }

        /// <summary>
        /// Set Register Content Changes the programming card of the robots register
        /// </summary>
        /// <exception cref="Tgm.Roborally.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">The id of the game to interact with</param>
        /// <param name="robotId">the id of the robot to interact with</param>
        /// <param name="register">The number of the register</param>
        /// <param name="statementId">The Id of the statement to place here</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Tgm.Roborally.Api.Client.ApiResponse<Object>> SetRegisterAsyncWithHttpInfo (int gameId, int robotId, int register, int statementId)
        {

            Tgm.Roborally.Api.Client.RequestOptions localVarRequestOptions = new Tgm.Roborally.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("game_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            localVarRequestOptions.PathParameters.Add("robot_id", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(robotId)); // path parameter
            localVarRequestOptions.PathParameters.Add("register", Tgm.Roborally.Api.Client.ClientUtils.ParameterToString(register)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "statement_id", statementId));

            // authentication (player-auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("pat")))
            {
                localVarRequestOptions.QueryParameters.Add(Tgm.Roborally.Api.Client.ClientUtils.ParameterToMultiMap("", "pat", this.Configuration.GetApiKeyWithPrefix("pat")));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/games/{game_id}/entities/robots/{robot_id}/registers/{register}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRegister", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
